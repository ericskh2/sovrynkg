# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/transactions.ipynb (unless otherwise specified).

__all__ = ['MustProvideCovalentAPIKey', 'classa_factory', 'RSK_CHAIN_ID', 'protocol', 'CLASSA', 'get_num_results',
           'get_block_height', 'save_result_to_file', 'max_pages_exceeded', 'paginate', 'get_transactions']

# Cell
import time
import os
import json
from functools import partial

from pathlib import Path
import covalent_api.constants as constants
import covalent_api as cov
from covalent_api.class_a import ClassA, constants

from .contracts import whatis, BY_NAME

RSK_CHAIN_ID = '30' #rsk
protocol = BY_NAME['sovrynProtocol']

class MustProvideCovalentAPIKey(Exception):
    pass

def classa_factory():
    constants.AVAILABLE_CHAIN_IDS['RSK Mainnet'] = RSK_CHAIN_ID
    api_key = os.environ.get('COVALENT_API_KEY', None)
    if not api_key:
        raise MustProvideCovalentAPIKey("Must set environment variable COVALENT_API_KEY")
    sess = cov.Session(api_key=api_key, timeout=15)
    sess._request.auth = (sess._api_key, '')
    return ClassA(sess)

CLASSA = classa_factory()

# Cell
def get_num_results(result):
    return len(result['data']['items'])

def get_block_height(result, index=-1):
    return result['data']['items'][index]['block_height']

def save_result_to_file(result, page_number, directory):
    first_block = get_block_height(result, index=0)
    last_block = get_block_height(result, index=-1)
    fname = 'result.{fb}__{lb}'.format(fb=first_block, lb=last_block)

    Path(directory).mkdir(exist_ok=True, parents=True)
    with open(os.path.join(directory, fname), 'w') as f:
        json.dump(result, f, indent=2)

def max_pages_exceeded(pages, max_pages):
    if max_pages is None:
        return False
    return pages>max_pages

def paginate(partial_func, page_size=10000, page_number=0, max_pages=10000, save_in_dir=None, in_memory=True):
    '''
    Create a partial function that accepts page_number and page_size kwargs
    '''
    num_results = None
    keep_going = True
    results = []
    files_saved = 0
    pages_retrieved = 0

    while keep_going and not max_pages_exceeded(pages_retrieved, max_pages):
        result = partial_func(page_number=page_number, page_size=page_size)
        pages_retrieved += 1

        if result['error']:
            keep_going = False
            return result
        else:
            num_results = get_num_results(result)

        if num_results == 0:
            keep_going = False
        else: #deal with results
            print("Got {num_results} results for page {pn}".format(num_results=num_results, pn=page_number))
            block_height = result['data']['items'][-1]['block_height']

            print("Block height {}".format(block_height))
            if in_memory:
                results.append(result)

            if save_in_dir:
                save_result_to_file(result=result, page_number=page_number, directory=save_in_dir)
                files_saved += 1

            page_number += 1
            time.sleep(0.1)

    if in_memory:
        return results
    else:
        return page_number

def get_transactions(address, **kwargs):
    partial_func = partial(CLASSA.get_transactions,
                           chain_id=RSK_CHAIN_ID, address=address)
    return paginate(partial_func, **kwargs)